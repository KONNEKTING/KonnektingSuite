/*
 * Copyright (C) 2016 Alexander Christian <alex(at)root1.de>. All rights reserved.
 * 
 * This file is part of KONNEKTING Suite.
 *
 *   KONNEKTING Suite is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   KONNEKTING Suite is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with KONNEKTING DeviceConfig.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.konnekting.suite.uicomponents;

import de.konnekting.deviceconfig.DeviceConfigContainer;
import de.konnekting.deviceconfig.exception.InvalidAddressFormatException;
import de.konnekting.suite.events.EventConsoleMessage;
import de.konnekting.suite.events.EventDeviceListRefresh;
import de.konnekting.suite.utils.Utils;
import de.root1.rooteventbus.RootEventBus;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author achristian
 */
public class IndividualAddressInputPanel extends javax.swing.JPanel implements ChangeListener {
    private DeviceConfigContainer device;

    /**
     * Creates new form IndividualAddressInputPanel
     */
    public IndividualAddressInputPanel() {
        initComponents();
        areaTextField.setRange(0, 15);
        lineTextField.setRange(0, 15);
        memberTextField.setRange(0, 255);
        memberTextField.setEmptyAllowed(true);
        
        areaTextField.setText("1");
        lineTextField.setText("1");
        memberTextField.setText("");
        
        
        areaTextField.addChangeListener(this);
        lineTextField.addChangeListener(this);
        memberTextField.addChangeListener(this);
        
        setEnabled(false);
        
    }
    
    public void setDevice(DeviceConfigContainer device) {
        if (device==null) {
            setEnabled(false);
            areaTextField.setText("1");
            lineTextField.setText("1");
            memberTextField.setText("");
            return;
        }
        setEnabled(true);
        this.device = device;
        String ia = device.getIndividualAddress();
        if (ia!=null) {
            areaTextField.setText(Utils.getArea(ia));
            lineTextField.setText(Utils.getLine(ia));
            memberTextField.setText(Utils.getMember(ia));
        }
        
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        areaTextField.setEnabled(enabled);
        lineTextField.setEnabled(enabled);
        memberTextField.setEnabled(enabled);
        parkButton.setEnabled(enabled);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        parkButton = new javax.swing.JButton();
        areaTextField = new de.konnekting.suite.uicomponents.NumberTextField();
        lineTextField = new de.konnekting.suite.uicomponents.NumberTextField();
        memberTextField = new de.konnekting.suite.uicomponents.NumberTextField();

        jLabel1.setText(".");

        jLabel2.setText(".");

        parkButton.setText("Parken");
        parkButton.setActionCommand("Parken");
        parkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parkButtonActionPerformed(evt);
            }
        });

        areaTextField.setColumns(3);
        areaTextField.setText("1");

        lineTextField.setColumns(3);
        lineTextField.setText("1");

        memberTextField.setColumns(4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(areaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lineTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(memberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(parkButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(jLabel2)
                .addComponent(parkButton)
                .addComponent(areaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lineTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(memberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void parkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parkButtonActionPerformed
        memberTextField.setText("");
        RootEventBus.getDefault().post(new EventConsoleMessage("Ger√§t geparkt: "+device.getIndividualAddress()+" "+device.getDescription()));
    }//GEN-LAST:event_parkButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.konnekting.suite.uicomponents.NumberTextField areaTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private de.konnekting.suite.uicomponents.NumberTextField lineTextField;
    private de.konnekting.suite.uicomponents.NumberTextField memberTextField;
    private javax.swing.JButton parkButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void stateChanged(ChangeEvent e) {
        try {
            if (device!=null && areaTextField.isInputValid() && lineTextField.isInputValid() && memberTextField.isInputValid()) {
                device.setIndividualAddress(areaTextField.getText() + "." + lineTextField.getText() + "." + memberTextField.getText());
                parkButton.setEnabled(!memberTextField.getText().isEmpty());
                RootEventBus.getDefault().post(new EventDeviceListRefresh());        
            }
        } catch (InvalidAddressFormatException ex) {
            ex.printStackTrace();
        }
    }
}
