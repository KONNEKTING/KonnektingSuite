/*
 * Copyright (C) 2016 Alexander Christian <alex(at)root1.de>. All rights reserved.
 * 
 * This file is part of KONNEKTING Suite.
 *
 *   KONNEKTING Suite is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   KONNEKTING Suite is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with KONNEKTING DeviceConfig.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.konnekting.suite;

import de.konnekting.deviceconfig.DeviceConfigContainer;
import de.konnekting.deviceconfig.exception.InvalidAddressFormatException;
import de.konnekting.suite.events.EventAddDevice;
import de.root1.rooteventbus.RootEventBus;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import javax.xml.bind.JAXBException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xml.sax.SAXException;

/**
 *
 * @author achristian
 */
public class SaveDeviceAsDialog extends javax.swing.JDialog {

    private final Logger log = LoggerFactory.getLogger(getClass());

    private DeviceConfigContainer device;
    private File configFile;

    private static final String CONFIG_EXTENSION = ".kconfig.xml";

    /**
     * Creates new form SaveDeviceAsDialog
     *
     * @param parent
     * @param projectDir
     * @param konnekt
     */
    private SaveDeviceAsDialog(java.awt.Frame parent, File projectDir, DeviceConfigContainer device) {
        super(parent, false);
        super.setModal(true);
        super.setLocationRelativeTo(parent);
        initComponents();

        try {
            this.device = device.makeConfigFile(projectDir);

            deviceInformationPanel.setDeviceConfig(this.device);

            if (device.hasConfiguration()) {
                deviceDescriptionTextField.setText("KOPIE VON " + device.getDescription());
            } else {
                deviceDescriptionTextField.setText(device.getManufacturerName() + " " + device.getDeviceName());
            }
        } catch (IOException ex) {
            log.error("Error creating configuration file", ex);
        }
    }

    public static void showDialog(java.awt.Frame parent, File projectDir, DeviceConfigContainer device) {
        SaveDeviceAsDialog dialog = new SaveDeviceAsDialog(parent, projectDir, device);
        dialog.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addDeviceButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        newDeviceNamePanel = new javax.swing.JPanel();
        descriptionLabel = new javax.swing.JLabel();
        deviceDescriptionTextField = new javax.swing.JTextField();
        deviceInformationPanel = new de.konnekting.suite.DeviceInformationPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/konnekting/suite/Bundle"); // NOI18N
        addDeviceButton.setText(bundle.getString("SaveDeviceAsDialog.addDeviceButton.text")); // NOI18N
        addDeviceButton.setMinimumSize(new java.awt.Dimension(500, 370));
        addDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDeviceButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(bundle.getString("SaveDeviceAsDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        newDeviceNamePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("SaveDeviceAsDialog.newDeviceNamePanel.border.title"))); // NOI18N

        descriptionLabel.setText(bundle.getString("SaveDeviceAsDialog.descriptionLabel.text")); // NOI18N

        javax.swing.GroupLayout newDeviceNamePanelLayout = new javax.swing.GroupLayout(newDeviceNamePanel);
        newDeviceNamePanel.setLayout(newDeviceNamePanelLayout);
        newDeviceNamePanelLayout.setHorizontalGroup(
            newDeviceNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newDeviceNamePanelLayout.createSequentialGroup()
                .addComponent(descriptionLabel)
                .addGap(10, 10, 10)
                .addComponent(deviceDescriptionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE))
        );
        newDeviceNamePanelLayout.setVerticalGroup(
            newDeviceNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newDeviceNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(descriptionLabel)
                .addComponent(deviceDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newDeviceNamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deviceInformationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addDeviceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deviceInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newDeviceNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(addDeviceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDeviceButtonActionPerformed

        device.setDescription(deviceDescriptionTextField.getText());

        try {
            device.setIndividualAddress("1.1.");
            try {
                device.writeConfig();
            } catch (JAXBException | SAXException ex) {
                log.error("Error writing file " + device.toString(), ex);
            }
            RootEventBus.getDefault().post(new EventAddDevice(device));
        } catch (InvalidAddressFormatException ex) {
            log.error("Error setting individual address. format invalid.");
        }

        this.dispose();
    }//GEN-LAST:event_addDeviceButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDeviceButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField deviceDescriptionTextField;
    private de.konnekting.suite.DeviceInformationPanel deviceInformationPanel;
    private javax.swing.JPanel newDeviceNamePanel;
    // End of variables declaration//GEN-END:variables
}
