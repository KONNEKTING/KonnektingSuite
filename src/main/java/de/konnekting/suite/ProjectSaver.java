/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.konnekting.suite;

import de.konnekting.deviceconfig.DeviceConfigContainer;
import de.konnekting.deviceconfig.exception.XMLFormatException;
import java.util.HashSet;
import java.util.Set;
import javax.swing.SwingUtilities;
import javax.xml.bind.JAXBException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xml.sax.SAXException;

/**
 *
 * @author achristian
 */
public class ProjectSaver extends javax.swing.JDialog {

    private Logger log = LoggerFactory.getLogger(getClass());
    private Set<DeviceConfigContainer> devices = new HashSet<>();

    /**
     * Creates new form ProjectSaver
     */
    public ProjectSaver(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        setLocationRelativeTo(parent);
    }

    @Override
    public void setVisible(boolean b) {
        if (b) {
            new BackgroundTask("Save project", Thread.NORM_PRIORITY) {

                @Override
                public void run() {
                    save();
                }
            };
        }
        super.setVisible(b); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * called when exactly?
     */
    private void save() {
        if (devices.isEmpty()) {
            done();
            return;
        }
        onProgress(0, devices.size(), "");
        validate();
        int i = 0;
        log.info("saving: {}", devices.size());
        for (DeviceConfigContainer device : devices) {
            log.info("Saving: {}", device);
            i++;
            try {
                
                String description = device.getIndividualAddress()+ " - " + device.getDescription();

                if (description == null || description.length() == 0) {
                    description = device.getDeviceName() + " [" + device.getManufacturerName() + "]";
                }
                
                onProgress(i, devices.size(), description);
                device.writeConfig();
            } catch (XMLFormatException ex) {
                ex.printStackTrace();
            } finally {
                log.info("Saving: {} *done*", device);
            }
        }
        log.info("save done");

        done();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressbar = new javax.swing.JProgressBar();
        messageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/konnekting/suite/i18n/language"); // NOI18N
        messageLabel.setText(bundle.getString("ProjectSaver.messageLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressbar, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(messageLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel messageLabel;
    private javax.swing.JProgressBar progressbar;
    // End of variables declaration//GEN-END:variables

    public void onProgress(int i, int max, String msg) {
        progressbar.setMaximum(max);
        progressbar.setValue(i);
        progressbar.setString(msg);
        progressbar.setStringPainted(true);
    }

    public void done() {
        setVisible(false);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                dispose();
            }
        });
    }

    void add(DeviceConfigContainer deviceConfig) {
        log.info("Added dirty: {} -> {}", deviceConfig, deviceConfig.hashCode());
        devices.add(deviceConfig);
    }

    void remove(DeviceConfigContainer deviceConfig) {
        log.info("Removed dirty: {} -> {}", deviceConfig, deviceConfig.hashCode());
        devices.remove(deviceConfig);
    }

}
